Example: String Data and Grouping of DNA
========================================

The *genieclust* package also allows for clustering of character string
data. Let's perform an example grouping based
on `Levenshtein's <https://en.wikipedia.org/wiki/Levenshtein_distance>`_ edit
distance.

We'll use one of the benchmark datasets mentioned in :cite:`genieins`
as an example:



<<settings,results="hidden",echo=False>>=
import pweave
from tabulate import tabulate
import numpy as np
np.set_printoptions(precision=3, threshold=50, edgeitems=50)
#pd.set_option("display.min_rows", 200)
#pd.set_option("display.width", 80)
#pd.set_option("display.max_colwidth", 30)
#plt.style.use("bmh")
#plt.rcParams.update({
#    'font.size': 9,
#    'font.family': 'sans-serif',
#    'font.sans-serif': ['Ubuntu Condensed', 'Alegreya', 'Alegreya Sans']})
@



<<string-example-strings>>=
import numpy as np
# see https://github.com/gagolews/genieclust/tree/master/devel/sphinx/rmd
strings = np.loadtxt("actg1.data.gz", dtype=np.str).tolist()
strings[:5] # preview
@

It comes with a set of reference labels, giving the "true" grouping assigned
by an expert:

<<string-example-labels>>=
labels_true = np.loadtxt("actg1.labels0.gz", dtype=np.intp)-1
n_clusters = len(np.unique(labels_true))
print(n_clusters)
@


Clustering in the string domain relies on the
near-neighbour search routines implemented in the `nmslib` package.

<<string-example-cluster>>=
import genieclust
g = genieclust.Genie(
    n_clusters=n_clusters,
    exact=False, # use nmslib
    cast_float32=False, # do not convert the string list to a matrix
    nmslib_params_index=dict(post=0), # faster
    affinity="leven")
labels_pred = g.fit_predict(strings)
@


The adjusted Rand index can be used as an external cluster validity metric:

<<string-example-ar>>=
genieclust.compare_partitions.adjusted_rand_score(labels_true, labels_pred)
@

This indicates a very high degree of similarity between the reference
and the obtained clusterings.
